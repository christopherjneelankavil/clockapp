import 'package:flutter/material.dart';
import 'package:hive/hive.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:intl/intl.dart';

part 'alarm_view.g.dart'; // This will be generated by Hive

class AlarmView extends StatefulWidget {
  const AlarmView({super.key});

  @override
  State<AlarmView> createState() => _AlarmViewState();
}

class _AlarmViewState extends State<AlarmView> {
  late Box<Alarm> _alarmsBox;

  @override
  void initState() {
    super.initState();
    _initHive();
  }

  Future<void> _initHive() async {
    _alarmsBox = Hive.box<Alarm>('alarms');
  }

  Future<void> _addAlarm(TimeOfDay time) async {
    final alarm = Alarm(
      hour: time.hour,
      minute: time.minute,
      active: true,
    );
    await _alarmsBox.add(alarm);
  }

  Future<void> _toggleAlarm(Alarm alarm, int index) async {
    final updatedAlarm = alarm.copyWith(active: !alarm.active);
    await _alarmsBox.putAt(index, updatedAlarm);
  }

  Future<void> _deleteAlarm(int index) async {
    await _alarmsBox.deleteAt(index);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Expanded(
              child: ValueListenableBuilder<Box<Alarm>>(
                valueListenable: _alarmsBox.listenable(),
                builder: (context, box, _) {
                  final alarms = box.values.toList();
                  return ListView.builder(
                    itemCount: alarms.length,
                    itemBuilder: (context, index) {
                      final alarm = alarms[index];
                      return Dismissible(
                        key: Key(alarm.key.toString()),
                        background: Container(color: Colors.red),
                        onDismissed: (_) => _deleteAlarm(index),
                        child: ListTile(
                          title: Text(
                            DateFormat.Hm().format(
                              DateTime(2023, 1, 1, alarm.hour, alarm.minute),
                            ),
                            style: const TextStyle(fontSize: 20),
                          ),
                          trailing: Switch(
                            value: alarm.active,
                            onChanged: (_) => _toggleAlarm(alarm, index),
                          ),
                        ),
                      );
                    },
                  );
                },
              ),
            ),
            Padding(
              padding: const EdgeInsets.only(bottom: 20.0),
              child: ElevatedButton.icon(
                icon: const Icon(Icons.add),
                label: const Text('Add Alarm'),
                onPressed: () async {
                  final time = await showTimePicker(
                    context: context,
                    initialTime: TimeOfDay.now(),
                  );
                  if (time != null) {
                    await _addAlarm(time);
                  }
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

@HiveType(typeId: 0)
class Alarm extends HiveObject {
  @HiveField(0)
  final int hour;

  @HiveField(1)
  final int minute;

  @HiveField(2)
  bool active;

  Alarm({
    required this.hour,
    required this.minute,
    required this.active,
  });

  Alarm copyWith({int? hour, int? minute, bool? active}) {
    return Alarm(
      hour: hour ?? this.hour,
      minute: minute ?? this.minute,
      active: active ?? this.active,
    );
  }
}